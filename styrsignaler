Styrsignaler:

uPC
    0000    +1
    0001    op addr

    0010    jmp
    0011    jmp on Z                    (jmpZ)
    0100    jmp on new IN               (jmpIN)
    0101    jmp if uCounter >= limit    (jmpC)
    0110    jmp if game started         (jmpS)

    1000    jmp if A immediate          (jmpAimm)
    1001    jmp if A direct             (jmpAdir)
    1010    jmp if A predecrement       (jmpApre)
    1011    jmp if B immediate          (jmpBimm)
    1100    jmp if B direct             (jmpBdir)
    1101    jmp if B predecrement       (jmpBpre)

    1111    = 0

PC
    00      PC (nothing)
    01      load from buss
    10      +1
    11      = 0

IR
    0       hold
    1       load from OP (or buss)

mem address
    000     hold
    001     buss
    010     AR 1
    011     AR 2
    100     ADR 1
    101     ADR 2
    110     PC

mem1
    00      nothing
    01      read
    10      write

mem2
    00      nothing
    01      read
    10      write

mem3
    00      nothing
    01      read
    10      write

OP
    0       hold
    1       buss

M1
    00      hold
    01      buss
    10      AR 1
    11      AR 2

M2
    00      hold
    01      buss
    10      AR 1
    11      AR 2

to buss
    000     PC
    001     OP
    010     M1
    011     M2
    100     ALU 1
    101     FIFO
    110     IN

ALU
    000     nothing (hold AR and don't update Z)
    001     load (and update Z)
    010     add
    011     sub
    100     +1
    101     -1
    110     cmp (sub on both ALU's, and Z if both registers are 0)
    111     <   (Z = ALU1 < ALU2)

ALU1
    00      M1
    01      buss
    10      M2
    11      mem_addr

ALU2
    0       M1
    1       M2

ADR1
    00     hold
    01     buss
    10     M1
    11     AR 1

ADR2
    00     hold
    01     buss
    10     M2
    11     AR 2

FIFO
    00      nothing
    01      buss (insert PC from main buss)
    10      change player
    11      next_pc

Totalt

FIXME!
Kontrollera signalerna under
FIXME!

FBART: (nothing needed as control signals)
    IN:
        1 bit next_address (we have writen our data to the memory, now we want the next data to write).
        1 bit reset (global)

    OUT signals (to ÂµComputer):
        1 bit has_data (we have recived 13 (16) bits of data and are ready to put them on the main_buss)
        3 bits control_signals (The 3 first bits of the first reciving (used for special commands))

    Control Signals commands:
        000 Noting special
        001 First transmission, start at top of memory (maybe not needed).
        010 End of transmission, quit recieving loop and wait for the player to start the game.

