; Startup, check if we're in game
    FIFO IR ADR1 ADR2 OP M1 M2 mem1 mem2 mem3 mem_addr ALU1 ALU2 ALU buss PC uPC  uPC_addr
00   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0110 00101000 ; jmpS GAME(28)

; Load in program to memory
01   00  0   00  00   0  00 00  00   00   00    000     00   0   000 110  00 0000 00000000 ; IN -> buss

; Load program 1
02   11  0   00  00   0  00 00  00   00   00    000     00   0   110 000  00 0000 00000000 ; ALU = 0, fifo_next
03   01  0   00  00   0  00 00  00   00   00    000     00   0   000 100  01 0000 00000000 ; ALU1 -> buss, buss -> FIFO, buss -> PC
04   10  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0000 00000000 ; change_player

05   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0100 00000111 ; jmpIN F1NUM(07)
06   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00000101 ; jmp -1(05)
07   00  0   00  00   0  00 00  00   00   00    000     01   0   001 110  00 0000 00000000 ; IN -> buss, buss -> ALU1
08   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0100 00001010 ; jmpIN F1OP(0a)
09   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00001000 ; jmp -1(08)
0a   00  0   00  00   1  00 00  00   00   00    000     00   0   000 110  00 0000 00000000 ; IN -> buss, buss -> OP
0b   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0100 00001101 ; jmpIN F1M1(0d)
0c   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00001011 ; jmp -1(0b)
0d   00  0   00  00   0  01 00  00   00   00    000     00   0   000 110  00 0000 00000000 ; IN -> buss, buss -> M1
0e   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0100 00010000 ; jmpIN F1M2(10)
0f   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00001110 ; jmp -1(0e)
10   00  0   00  00   0  00 01  00   00   00    110     00   0   000 110  00 0000 00000000 ; IN -> buss, buss -> M2, PC -> mem_addr
11   00  0   00  00   0  00 00  10   10   10    000     00   0   000 000  00 0000 00000000 ; OP -> mem, M1 -> mem, M2 -> mem
12   00  0   00  00   0  00 00  00   00   00    000     00   0   101 000  10 0000 00000000 ; ALU--, PC++
13   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0011 00010101 ; jmpZ LOAD2(15)
14   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00001000 ; jmp F1ROW(08)

; Load program 2
    FIFO IR ADR1 ADR2 OP M1 M2 mem1 mem2 mem3 mem_addr ALU1 ALU2 ALU buss PC uPC  uPC_addr
15   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0100 00010111 ; jmpIN F2PC(17)
16   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00010101 ; jmp -1(15)
17   01  0   00  00   0  00 00  00   00   00    000     00   0   000 110  01 0000 00000000 ; IN -> buss, buss -> FIFO, buss -> PC
18   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0100 00011010 ; jmpIN F2NUM(1a)
19   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00011000 ; jmp -1(18)
1a   00  0   00  00   0  00 00  00   00   00    000     01   0   001 110  00 0000 00000000 ; IN -> buss, buss -> ALU1
1b   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0100 00011101 ; jmpIN F2OP(1d)
1c   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00011011 ; jmp -1(1b)
1d   00  0   00  00   1  00 00  00   00   00    000     00   0   000 110  00 0000 00000000 ; IN -> buss, buss -> OP
1e   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0100 00100000 ; jmpIN F2M1(20)
1f   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00011110 ; jmp -1(1e)
20   00  0   00  00   0  01 00  00   00   00    000     00   0   000 110  00 0000 00000000 ; IN -> buss, buss -> M1
21   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0100 00100011 ; jmpIN F2M2(23)
22   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00100001 ; jmp -1(21)
23   00  0   00  00   0  00 01  00   00   00    110     00   0   000 110  00 0000 00000000 ; IN -> buss, buss -> M2, PC -> mem_addr
24   00  0   00  00   0  00 00  10   10   10    000     00   0   000 000  00 0000 00000000 ; OP -> mem, M1 -> mem, M2 -> mem
25   00  0   00  00   0  00 00  00   00   00    000     00   0   101 000  10 0000 00000000 ; ALU--, PC++
26   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0011 00000000 ; jmpZ 0(00)
27   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00011011 ; jmp F2ROW(1b)


; Game sequence
28   10  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0000 00000000 ; change_player
29   11  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0000 00000000 ; fifo_next
2a   00  0   00  00   0  00 00  00   00   00    000     00   0   000 101  01 0000 00000000 ; FIFO -> buss, buss -> PC
2b   00  0   00  00   0  00 00  00   00   00    110     00   0   000 000  00 0000 00000000 ; PC -> mem_addr
2c   00  0   00  00   0  00 00  01   01   01    000     00   0   000 000  00 0000 00000000 ; mem -> OP, mem -> M1, mem -> M2
2d   00  1   00  00   0  00 00  00   00   00    000     00   0   000 001  00 0010 00101110 ; OP -> buss, buss -> IR, jmp AMOD(2e)

; Calculate adress mode for A operand
    FIFO IR ADR1 ADR2 OP M1 M2 mem1 mem2 mem3 mem_addr ALU1 ALU2 ALU buss PC uPC  uPC_addr
2e   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1001 00111111 ; jmpAimm BMOD(3f)
2f   00  0   00  00   0  00 00  00   00   00    000     00   0   001 000  00 0000 00000000 ; M1 -> ALU1
30   00  0   00  00   0  00 00  00   00   00    000     01   0   010 000  00 0000 00000000 ; ALU1 += PC
31   00  0   00  00   0  10 00  00   00   00    000     00   0   000 000  00 0000 00000000 ; ALU1 -> M1
32   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1010 00111111 ; jmpAdir BMOD(3f)
33   00  0   00  00   0  00 00  00   00   01    001     00   0   000 010  00 0000 00000000 ; M1 -> buss, buss -> mem_addr, mem -> M2
34   00  0   00  00   0  01 00  00   00   00    000     00   0   000 011  00 0000 00000000 ; M2 -> buss, buss -> M1
35   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1011 00111010 ; jmpApre APRE(3a)
36   00  0   00  00   0  00 00  00   00   00    000     00   0   001 000  00 0000 00000000 ; M1 -> ALU1
37   00  0   00  00   0  00 00  00   00   00    000     11   0   010 000  00 0000 00000000 ; ALU1 += mem_addr
38   00  0   00  00   0  10 00  00   00   00    000     00   0   000 000  00 0000 00000000 ; ALU1 -> M1
39   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00111111 ; jmp BMOD(3f)

3a   00  0   00  00   0  00 00  00   00   00    000     00   0   001 000  00 0000 00000000 ; M1 -> ALU1
3b   00  0   00  00   0  00 00  00   00   00    000     00   0   101 000  00 0000 00000000 ; ALU--
3c   00  0   00  00   0  10 10  00   00   00    000     00   0   000 000  00 0000 00000000 ; ALU1 -> M1, ALU1 -> M2
3d   00  0   00  00   0  00 00  00   00   10    000     00   0   000 000  00 0000 00000000 ; M2 -> mem
3e   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 00110110 ; jmp AOFF(36)

; Calculate adress mode for B operand
3f   00  0   00  00   0  00 00  00   00   00    110     00   0   000 000  00 0000 00000000 ; PC -> mem_addr
40   00  0   00  00   0  00 00  00   00   01    000     00   0   000 000  00 0000 00000000 ; mem -> M2
41   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1100 01010010 ; jmpBimm INSTR(52)
42   00  0   00  00   0  00 00  00   00   00    000     10   0   001 000  00 0000 00000000 ; M2 -> ALU1
43   00  0   00  00   0  00 00  00   00   00    000     01   0   010 000  00 0000 00000000 ; ALU1 += PC
44   00  0   00  00   0  00 10  00   00   00    000     00   0   000 000  00 0000 00000000 ; ALU1 -> M2
45   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1101 01010010 ; jmpBdir INSTR(52)
46   00  0   00  00   0  00 00  00   00   00    001     00   0   000 011  00 0000 00000000 ; M2 -> buss, buss -> mem_addr
47   00  0   00  00   0  00 00  00   00   01    000     00   0   000 000  00 0000 00000000 ; mem -> M2
48   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1110 01001101 ; jmpBpre BPRE(4d)
49   00  0   00  00   0  00 00  00   00   00    000     10   0   001 000  00 0000 00000000 ; M2 -> ALU1
4a   00  0   00  00   0  00 00  00   00   00    000     11   0   010 000  00 0000 00000000 ; ALU1 += mem_addr
4b   00  0   00  00   0  00 10  00   00   00    000     00   0   000 000  00 0000 00000000 ; ALU1 -> M2
4c   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 01010010 ; jmp INSTR(52)

    FIFO IR ADR1 ADR2 OP M1 M2 mem1 mem2 mem3 mem_addr ALU1 ALU2 ALU buss PC uPC  uPC_addr
4d   00  0   00  00   0  00 00  00   00   00    000     10   0   001 000  00 0000 00000000 ; M2 -> ALU1
4e   00  0   00  00   0  00 00  00   00   00    000     00   0   101 000  00 0000 00000000 ; ALU--
4f   00  0   00  00   0  00 10  00   00   00    000     00   0   000 000  00 0000 00000000 ; ALU1 -> M2
50   00  0   00  00   0  00 00  00   00   10    000     00   0   000 000  00 0000 00000000 ; M2 -> mem
51   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 01001001 ; jmp BOFF(49)


; Load up instruction and proceed to instruction decoding
; A operand is now in ADR1 and B in ADR2
; If immediate ignore these, they're also in M1 and M2

52   00  0   10  10   0  00 00  00   00   00    000     00   0   000 000  00 0001 00000000 ; M1 -> ADR1, M2 -> ADR2, op_addr -> uPC


; Execute instruction
;
; ADR1 is now the absolute address for the A operand
; ADR2 is for the B operand
; M1 and M2 holds copies of ADR1 and ADR2 always
;
; If immediate, the data is instead in M1 or M2

; DAT  Executing data will eat up the PC
53   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10111001 ; jmp END(b9)

; MOV  Move A to B
54   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1001 01011010 ; jmpAimm IMOV(5a)
55   00  0   00  00   0  00 00  00   00   00    100     00   0   000 000  00 0000 00000000 ; ADR1 -> mem_addr
56   00  0   00  00   0  00 00  01   01   01    000     00   0   000 000  00 0000 00000000 ; mem -> OP, mem -> M1, mem -> M2
57   00  0   00  00   0  00 00  00   00   00    101     00   0   000 000  00 0000 00000000 ; ADR2 -> mem_addr
58   00  0   00  00   0  00 00  10   10   10    000     00   0   000 000  00 0000 00000000 ; OP -> mem, M1 -> mem, M2 -> mem
59   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10110111 ; jmp ADDPC(b7)

; If A immediate, move A to B op specified by B mem address
5a   00  0   00  00   0  00 01  00   00   00    101     00   0   000 010  00 0000 00000000 ; ADR2 -> mem_addr, M1 -> buss, buss -> M2
5b   00  0   00  00   0  00 00  00   00   10    000     00   0   000 000  00 0000 00000000 ; M2 -> mem
5c   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10110111 ; jmp ADDPC(b7)

; ADD  Add A to B
5d   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1001 01100110 ; jmpAimm IADD(66)
5e   00  0   00  00   0  00 00  00   00   00    100     00   0   000 000  00 0000 00000000 ; ADR1 -> mem_addr
5f   00  0   00  00   0  00 00  00   01   01    000     00   0   000 000  00 0000 00000000 ; mem -> M1, mem -> M2
60   00  0   00  00   0  00 00  00   00   00    101     00   1   001 000  00 0000 00000000 ; ADR2 -> mem_addr, M1 -> ALU1, M2 -> ALU2
61   00  0   00  00   0  00 00  00   01   01    000     00   0   000 000  00 0000 00000000 ; mem -> M1, mem -> M2
62   00  0   00  00   0  00 00  00   00   00    000     00   1   010 000  00 0000 00000000 ; ALU1 += M1, ALU2 += M2
63   00  0   00  00   0  10 11  00   00   00    000     00   0   000 000  00 0000 00000000 ; ALU1 -> M1, ALU2 -> M2
64   00  0   00  00   0  00 00  00   10   10    000     00   0   000 000  00 0000 00000000 ; M1 -> mem, M2 -> mem
65   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10110111 ; jmp ADDPC(b7)

    FIFO IR ADR1 ADR2 OP M1 M2 mem1 mem2 mem3 mem_addr ALU1 ALU2 ALU buss PC uPC  uPC_addr
66   00  0   00  00   0  00 00  00   00   00    101     00   0   000 000  00 0000 00000000 ; ADR2 -> mem_addr
67   00  0   00  00   0  00 00  00   00   01    000     00   0   001 000  00 0000 00000000 ; M1 -> ALU1, mem -> M2
68   00  0   00  00   0  00 00  00   00   00    000     10   0   010 000  00 0000 00000000 ; ALU1 += M2
69   00  0   00  00   0  00 10  00   00   00    000     00   0   000 000  00 0000 00000000 ; ALU1 -> M2
6a   00  0   00  00   0  00 00  00   00   10    000     00   0   000 000  00 0000 00000000 ; M2 -> mem
6b   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10110111 ; jmp ADDPC(b7)

; SUB  Sub A from B
6c   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1001 01110101 ; jmpAimm ISUB(75)
6d   00  0   00  00   0  00 00  00   00   00    101     00   0   000 000  00 0000 00000000 ; ADR2 -> mem_addr
6e   00  0   00  00   0  00 00  00   01   01    000     00   0   000 000  00 0000 00000000 ; mem -> M1, mem -> M2
6f   00  0   00  00   0  00 00  00   00   00    100     00   1   001 000  00 0000 00000000 ; ADR1 -> mem_addr, M1 -> ALU1, M2 -> ALU2
70   00  0   00  00   0  00 00  00   01   01    000     00   0   000 000  00 0000 00000000 ; mem -> M1, mem -> M2
71   00  0   00  00   0  00 00  00   00   00    000     00   1   011 000  00 0000 00000000 ; ALU1 -= M1, ALU2 -= M2
72   00  0   00  00   0  10 11  00   00   00    101     00   0   000 000  00 0000 00000000 ; ALU1 -> M1, ALU2 -> M2, ADR2 -> mem_addr
73   00  0   00  00   0  00 00  00   10   10    000     00   0   000 000  00 0000 00000000 ; M1 -> mem, M2 -> mem
74   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10110111 ; jmp ADDPC(b7)

75   00  0   00  00   0  00 00  00   00   00    101     00   0   000 000  00 0000 00000000 ; ADR2 -> mem_addr
76   00  0   00  00   0  00 00  00   00   01    000     00   0   000 000  00 0000 00000000 ; mem -> M2
77   00  0   00  00   0  00 00  00   00   00    000     10   0   001 000  00 0000 00000000 ; M2 -> ALU1
78   00  0   00  00   0  00 00  00   00   00    000     00   0   011 000  00 0000 00000000 ; ALU1 -= M1
79   00  0   00  00   0  00 10  00   00   00    000     00   0   000 000  00 0000 00000000 ; ALU1 -> M2
7a   00  0   00  00   0  00 00  00   00   10    000     00   0   000 000  00 0000 00000000 ; M2 -> mem
7b   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10110111 ; jmp ADDPC(b7)

; JMP  Jump to A
    FIFO IR ADR1 ADR2 OP M1 M2 mem1 mem2 mem3 mem_addr ALU1 ALU2 ALU buss PC uPC  uPC_addr
7c   00  0   00  00   0  00 00  00   00   00    100     00   0   000 000  00 0000 00000000 ; ADR1 -> mem_addr
7d   00  0   00  00   0  00 00  00   01   00    000     11   0   001 000  00 0000 00000000 ; mem -> M1, mem_addr -> ALU1
7e   00  0   00  00   0  00 00  00   00   00    000     00   0   010 000  00 0000 00000000 ; ALU1 += M1
7f   01  0   00  00   0  00 00  00   00   00    000     00   0   000 100  00 0010 10111001 ; ALU1 -> buss, buss -> FIFO, jmp END(b9)

; JMPZ Jump to A if B zero
80   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1100 10000011 ; jmpBimm IJMPZ(83)
81   00  0   00  00   0  00 00  00   00   00    101     00   0   000 000  00 0000 00000000 ; ADR2 -> mem_addr
82   00  0   00  00   0  00 00  00   00   01    000     00   0   000 000  00 0000 00000000 ; mem -> M2
83   00  0   00  00   0  00 00  00   00   00    000     10   0   001 000  00 0000 00000000 ; M2 -> ALU1
84   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0011 10000110 ; jmpZ DOJMPZ(86)
85   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10110111 ; jmp ADDPC(b7)
86   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 01111100 ; jmp JMP(7c)

; JMPN Jump to A if B non-zero
87   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1100 10001010 ; jmpBimm IJMPN(8a)
88   00  0   00  00   0  00 00  00   00   00    101     00   0   000 000  00 0000 00000000 ; ADR2 -> mem_addr
89   00  0   00  00   0  00 00  00   00   01    000     00   0   000 000  00 0000 00000000 ; mem -> M2
8a   00  0   00  00   0  00 00  00   00   00    000     10   0   001 000  00 0000 00000000 ; M2 -> ALU1
8b   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0011 10110111 ; jmpZ ADDPC(b7)
8c   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 01111100 ; jmp JMP(7c)

; CMP If A eq B skip next instr
8d   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1001 10011010 ; jmpAimm ICMP(9a)
8e   00  0   00  00   0  00 00  00   00   00    101     00   0   000 000  00 0000 00000000 ; ADR2 -> mem_addr
8f   00  0   00  00   0  00 00  01   01   01    000     00   0   000 000  00 0000 00000000 ; mem -> OP, mem -> M1, mem -> M2
90   00  0   00  00   0  00 00  00   00   00    100     00   1   001 000  00 0000 00000000 ; ADR1 -> mem_addr, M1 -> ALU1, M2 -> ALU2
91   00  0   00  00   0  00 00  00   01   01    000     00   0   000 000  00 0000 00000000 ; mem -> M1, mem -> M2
92   00  0   00  00   0  00 00  00   00   00    000     00   1   011 000  00 0000 00000000 ; ALU1 -= M1, ALU2 -= M2
93   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1000 10010101 ; jmpE CMPOP(95)
94   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10110111 ; jmp ADDPC(b7)

    FIFO IR ADR1 ADR2 OP M1 M2 mem1 mem2 mem3 mem_addr ALU1 ALU2 ALU buss PC uPC  uPC_addr
95   00  0   00  00   0  00 00  00   00   00    000     01   0   001 001  00 0000 00000000 ; OP -> buss, buss -> ALU1
96   00  0   00  00   0  00 00  01   00   00    000     00   0   000 000  00 0000 00000000 ; mem -> OP
97   00  0   00  00   0  00 00  00   00   00    000     01   0   011 001  00 0000 00000000 ; ALU1 -= OP
98   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0011 10110110 ; jmpZ SKIP(b6)
99   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10110111 ; jmp ADDPC(b7)

9a   00  0   00  00   0  00 00  00   00   00    101     00   0   000 000  00 0000 00000000 ; ADR2 -> mem_addr
9b   00  0   00  00   0  00 00  00   00   01    000     00   0   001 000  00 0000 00000000 ; mem -> M2, M1 -> ALU1
9c   00  0   00  00   0  00 00  00   00   00    000     10   0   011 000  00 0000 00000000 ; ALU1 -= M2
9d   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0011 10110110 ; jmpZ SKIP(b6)
9e   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10110111 ; jmp ADDPC(b7)

; SLT if A is less than B skip next instr
9f   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1001 10101000 ; jmpAimm ISLT(a8)
a0   00  0   00  00   0  00 00  00   00   00    100     00   0   000 000  00 0000 00000000 ; ADR1 -> mem_addr
a1   00  0   00  00   0  00 00  00   00   01    000     00   0   000 000  00 0000 00000000 ; mem -> M2
a2   00  0   00  00   0  00 00  00   00   00    000     10   0   001 000  00 0000 00000000 ; M2 -> ALU1
a3   00  0   00  00   0  00 00  00   00   00    101     00   0   000 000  00 0000 00000000 ; ADR2 -> mem_addr
a4   00  0   00  00   0  00 00  00   00   01    000     00   0   000 000  00 0000 00000000 ; mem -> M2
a5   00  0   00  00   0  00 00  00   00   00    000     10   0   011 000  00 0000 00000000 ; ALU1 -= M2
a6   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0111 10110110 ; jmpN SKIP(b6)
a7   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10110111 ; jmp ADDPC(b7)

a8   00  0   00  00   0  00 00  00   00   00    000     00   0   001 000  00 0010 10100011 ; M1 -> ALU1, jmp SLTCMP(a3)

; DJN Decr B, if not zero jmp to A
a9   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 1100 10110010 ; jmpBimm IDJN(b2)
aa   00  0   00  00   0  00 00  00   00   00    101     00   0   000 000  00 0000 00000000 ; ADR2 -> mem_addr
ab   00  0   00  00   0  00 00  00   00   01    000     00   0   000 000  00 0000 00000000 ; mem -> M2
ac   00  0   00  00   0  00 00  00   00   00    000     10   0   001 000  00 0000 00000000 ; M2 -> ALU1
ad   00  0   00  00   0  00 00  00   00   00    000     00   0   101 000  00 0000 00000000 ; ALU--
ae   00  0   00  00   0  00 10  00   00   00    000     00   0   000 000  00 0000 00000000 ; ALU1 -> M2
af   00  0   00  00   0  00 00  00   00   10    000     00   0   000 000  00 0000 00000000 ; M2 -> mem
b0   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0011 10110111 ; jmpZ ADDPC(b7)
b1   01  0   00  00   0  00 00  00   00   00    000     00   0   000 010  00 0010 10111001 ; M1 -> buss, buss -> FIFO, jmp END(b9)

    FIFO IR ADR1 ADR2 OP M1 M2 mem1 mem2 mem3 mem_addr ALU1 ALU2 ALU buss PC uPC  uPC_addr
b2   00  0   00  00   0  00 00  00   00   00    000     10   0   001 000  00 0010 10110000 ; M2 -> ALU1, jmp CMPDJN(b0)

; SPL Place A in process queue
b3   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  10 0000 00000000 ; PC++
b4   01  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0000 00000000 ; PC -> buss, buss -> FIFO
b5   01  0   00  00   0  00 00  00   00   00    000     00   0   000 010  00 0010 10111001 ; M1 -> buss, buss -> FIFO, jmp END(b9)


b6   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  10 0010 10110111 ; PC++, jmp ADDPC(b7)

; Keep the PC for next round
b7   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  10 0000 00000000 ; PC++
b8   01  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0000 00000000 ; PC -> buss, buss -> FIFO

b9   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10111010 ; jmp DELAY(ba)
ba   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0101 00000000 ; jmpC 0(00)
bb   00  0   00  00   0  00 00  00   00   00    000     00   0   000 000  00 0010 10111010 ; jmp DELAY(ba)


;   Direct (default)
; The value is an offset to the memory location.
;
; # Immediate
; The value is the data
;
; @ Indirect
; Offset to a memory location. B operand of that is an offset to another memory location.
;
; < Pre-decrement indirect
; Offset to a memory location. B operand there, B--, inserted again. That is then used as an offset to another memory location.

