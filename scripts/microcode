; Fetch instruction
        PC -> mem_addr, uCount = 0
        mem -> OP, mem -> M1, mem -> M2
        OP -> IR, jmp $AMOD

; Calculate adress mode for A operand
:AMOD   jmpAimm $BMOD               ; If immediate we're done
        M1 -> ALU1                  ; Address is a relative offset
        ALU1 += PC                  ; so add PC
        ALU1 -> M1
        jmpAdir $BMOD               ; If direct, we're done
        M1 -> mem_addr, mem -> M2   ; Check B address
        M2 -> M1                    ; Move it to A's place
        jmpApre $APRE               ; If pre-decr decr and come back
:AOFF   M1 -> ALU1                  ; Relative offset, add PC
        ALU1 += PC
        ALU1 -> M1
        jmp $BMOD                   ; Do the same for the B operand

:APRE   M1 -> ALU1                  ; Decr
        ALU--
        ALU1 -> M1, ALU1 -> M2
        M2 -> mem                   ; Write it back where it came from
        jmp $AOFF                   ; Continue

; Calculate adress mode for B operand
:BMOD   PC -> mem_addr              ; Retrieve data
        mem -> M2
        jmpBimm $INSTR              ; If immediate we're done
        M2 -> ALU1                  ; Relative address, add PC
        ALU1 += PC
        ALU1 -> M2
        jmpBdir $INSTR              ; If direct, we're done
        M2 -> mem_addr
        mem -> M2                   ; Check B operand of the address
        jmpBpre $BPRE
:BOFF   M2 -> ALU1                  ; Relative offset, add PC
        ALU1 += PC
        ALU1 -> M2
        jmp $INSTR                  ; We're done

:BPRE   M2 -> ALU1                  ; Decr
        ALU--
        ALU1 -> M2
        M2 -> mem                   ; Write it back where it came from
        jmp $BOFF                   ; Continue


; Load up instruction
:INSTR  M1 -> ADR1, M2 -> ADR2      ; A operand is now in ADR1 and B in ADR2 (if immediate ignore these)
        op_addr -> uPC


; Execute instruction
;
; ADR1 is now the absolute address for the A operand
; ADR2 is for the B operand
;
; If immediate, the data is instead in M1 or M2

; DAT  Executing data will eat up the PC
:DAT    jmp $END

; MOV  Move A to B
:MOV    jmpAimm $IMOV                       ; Handle A immediate special case
        ADR1 -> mem_addr                    ; Peek at memory from A absolute addr
        mem -> OP, mem -> M1, mem -> M2
        ADR2 -> mem_addr                    ; Copy it to B absolute addr
        OP -> mem, M1 -> mem, M2 -> mem
        jmp $ADDPC                          ; Keep using our PC

; If A immediate, move A to B op specified by B mem address
:IMOV   ADR2 -> mem_addr, M1 -> M2          ; Examine B's absolute address
        M2 -> mem                           ; Move A op there
        jmp $ADDPC                          ; We want to keep our PC


; Keep the PC for next round
:ADDPC  PC++
;       PC -> FIFO

:END    jmp $DELAY
:DELAY  jmpC 0                              ; Start over when we've spent enough time
        jmp $DELAY

; Examine A-field
; if immediate, we're done
; otherwise A-field += PC
; if direct, we're done
; otherwise the B-field of this direct memory location is read into the A-field
; if predecrement, then the value just read is decremented and written back
;   to the memory location from whence it came
;   A-field += PC
;
; do the same for the B-field...
; now examine and do code!
;
; finally, if no branch and instr not a DAT
; PC++ and insert into fifo
;
;
;   Direct (default)
; The value is an offset to the memory location.
;
; # Immediate
; The value is the data
;
; @ Indirect
; Offset to a memory location. B operand of that is an offset to another memory location.
;
; < Pre-decrement indirect
; Offset to a memory location. B operand there, B--, inserted again. That is then used as an offset to another memory location.

