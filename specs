# Kravspecifikation

1. Inledning (TODO)

Beskrivning av CoreWars här.
- (20:50 03-20 lee) Det skulle varar skönt om du skriva den :D, min svenska suger. Och jag tycker att 
        vi behöver skriva mer om vad gör vår "låda/uDator" instället för CoreWars.


2. Blockschema (TODO)

Kommer bara bli in/out till och från dator till vår låda? Eventuellt reset? Hur noga måste den vara eller räcker det?

Designskissen som är till nästa vecka ska ha ett utförligt blockschema dock.
- (20:50 03-20 lee) ja! 
    
                ----------          ------------
    Reset --->  | uDator |   <--->  | vår dator |
                |        |          |           |
                ----------          -------------
        
    
    men är den här inte för enkelt? :P
    
3. Kravlista (TODO)

    Ska-krav
    1. Spela CoreWars
    2. Mata in kod från dator
    3. Dumpa minnesinnehåll och spelstatus till dator
    4. Resetknapp
    5. En XC9572 ska ingå i konstruktionen.

    Bör-krav
    1. Dumpa minnesinehåll förskönat till skärm

Direkt skärmdumpning med grafik är nice-to-have men inte ett skall krav. Om vi hinner klart med allt annat kan vi börja fundera på en lite förskönad minnes/status-dumpning men tills dess tycker jag vi kan köra på externa script som visualiserar hur programmen körs eller visar kod vid olika tidpunkter. Är dump att stirra in sig och lägga till en massa coola funktioner men att sen stressa med att få klart. Då är det bättre att vara återhållsam när man specar.
- (20:50 03-20 lee) Hålla med.


# Minikurs till Core Wars

TODO
Skriv om till egna ord och mer förklarande
- (20:50 03-20 lee) ja, men jag tänkte att vi skulle skriva en egen coreWars som är mycket lättare, så 
        vet jag inte vilka specs/regel vi ska ha nu. Dessutom den här är bara en kort intro för Olle.  

Core War is a programming game in which two battle programs compete for the control of the "Memory Array Redcode Simulator". At the start eacah battle program is put into the meory array at a random location, after which each battle program can execute one instruction in turn.
The object of the game is to cause all processes of the opposing programs to terminate.
In this game, you may imagine yourself as a computer virus with AI, w
For more informaion, please check: <http://corewars.nihilists.de/redcode-icws-88.pdf> or
                                   <http://en.wikipedia.org/wiki/Core_War>
- Game detail
    = How to play?
        Each gamer create their own warriors and place them into the computer, then sit back and watch
        them killing each other after game starts.
    = Strategy
        There are three common strategies(replicator, scanner and bomber) also aka paper, scissors and stone.

        = Bomber=(stone): blindly copies a "bomb" at regular intervals in the core, hoping to hit the enemy.
          The bomb is often a DAT instruction, multi-instruction etc.
        = Replicator =(paper): makes repeated copies of itself and executes them in parallel, filling the
          entire core of its code.
        = Scanner =(scissor): is designed to beat replicators, usually by bombing memory with SPL 0
          instructions. This causes the enemy to create a huge number of processes which do nothing but
          create more processes. This slows down useful processes. When the enemy becomes so slow that it is
          unable to do anything useful, the memory is bombed with DAT instructions.
        (and lots more, like Dwarfm imp, germini and Juggeraut)

    = instruction: OP A B
        > OP: which operation to be performed, wich a-mod should be used.
        > Instruction set of ICWS-88 Core War:
            DAT A B: remove executing process from process queue
            MOV A B: move A to B
            ADD A B: add A to B
            SUB A B: subtract A from B
            JMP A B: jump to A
            JMZ A B: jump to A if B is zero
            JMN A B: jump to A if B is not zero
            CMP A B: if A equals B, then skip the next instruction
            SLT A B: if A is less than B then skip next instruction
            DJN A B: decrement A; if B is not zero then jump to A
            SPL A B: place A in the process queue
    = A-mod:
        immediate(#); direct(default); indirect(@) and predecrement-indirect(<) is allowed.

