# Kravspecifikation

0. Ett awesomesauce namn till datorn!
Datorn i CoreWars heter MARS, vilket står för Memory Array Redcode Simulator.
Då detta ej är en simulator dör namnet vara något annat.


1. Inledning (TODO)

Beskrivning av CoreWars här.
- (20:50 03-20 lee) Det skulle varar skönt om du skriva den :D, min svenska suger. Och jag tycker att
        vi behöver skriva mer om vad gör vår "låda/uDator" instället för CoreWars.
- (Jesper) Bah, vi kan skriva en del på Engelska, all coola kids skriver stuffs på Engelska!
- Isåfall skriver vi allt på engelska, bara fjantigt att blanda. Coola kids bryr sig inte om vad andra gör!

2. Blockschema (TODO)

Kommer bara bli in/out till och från dator till vår låda? Eventuellt reset? Hur noga måste den vara eller räcker det?

Designskissen som är till nästa vecka ska ha ett utförligt blockschema dock.  
- (20:50 03-20 lee) ja!
- (Jesper) se datordiagram_1.jpeg

                ----------          ------------
    Reset --->  | uDator |   <--->  | vår dator |
                |        |          |           |
                ----------          -------------


    men är den här inte för enkelt? :P

- (Jonas) Apropå datordiagramet.
          Jag tror att det diagram vi ska göra nu handlar om användingen, inte implementationen.
          Nästa steg, designskissen, ska vi ha utförligt alla kopplingar dock.

          Sedan kanske vi kan direktmappa IO till memory för dumpning?
          Har ni funderat på att ha en FIFO, dvs en queue, per spelare? Annars kan man få problemet att den som spammar processer får ett övertag och snor alla platser i PC memory. Dessutom måste vi loopa igenom minnet tills vi hittar en valid PC till player 2 om player 1 har många PC. Om vi istället har två köer kommer båda få samma limit och vi slipper söka nästa PC, det är enkelt att beräkna den.
          Varför 2x ALU, SIMD?
          Vi kan inte köra båda PC samtidigt ändå då bussfördröjningen gör att vi inte tjänar nåt på det. Eller missar jag nåt?
          Då vi har t.ex. JMZ behöver vi SR, men koppla direkt till ALU så spelar det ingen roll egentligen.
          Vi behöver ett XR register om vi vill använda indexerad a-mod, vilket vi vill! Koppla den direkt till adressbussen med +1 så blir det bra.

3. Kravlista (TODO)

    Ska-krav
    1. Spela CoreWars enligt '88 standarden; http://corewars.nihilists.de/redcode-icws-88.pdf
    2. Mata in kod till minnet från dator och sätta minst en PC per spelare till ett startvärde från värddatorn. 
          Kan detta skötas via exceptions? Vi behöver endast ett som laddar hela minnet med en ström data från UARTEN.
        - Man skulle lika väl kunna ha DMA så att datorn kan skriva direkt till minnet?
          Sen tillkommer problemet hur ska vi starta spelet?
          Lättast kanske vore att ha en av tryckknapparna vara start? Kanske en stop?
    3. Dumpa minnesinnehåll och spelstatus till dator.
    4. Resetknapp
- Varför ska denna finnas då vi har en värddator?
- Ska vi då ha reset från datorn? Och vi behöver nåt sätt att starta spelet också. Stop?
  Då är det lättaste kanske att ha de knappar som jag tror finns på kortet direktmappade som start/stop och eventuellt reset?
    5. En XC9572 ska ingå i konstruktionen.

    Bör-krav
    1. Dumpa minnesinehåll förskönat till skärm

Direkt skärmdumpning med grafik är nice-to-have men inte ett skall krav. Om vi hinner klart med allt annat kan vi börja fundera på en lite förskönad minnes/status-dumpning men tills dess tycker jag vi kan köra på externa script som visualiserar hur programmen körs eller visar kod vid olika tidpunkter. Är dump att stirra in sig och lägga till en massa coola funktioner men att sen stressa med att få klart. Då är det bättre att vara återhållsam när man specar.
- (20:50 03-20 lee) Hålla med.


# Minikurs till Core Wars

TODO
Skriv om till egna ord och mer förklarande
- (20:50 03-20 lee) ja, men jag tänkte att vi skulle skriva en egen coreWars som är mycket lättare, så
        vet jag inte vilka specs/regel vi ska ha nu. Dessutom den här är bara en kort intro för Olle.
- (Jonas) Ja och och vi behöver isåfall bestämma hur den skall vara. Och det är bra för oss också att skriva om. Dessutom ska inte allt vara med i kravspecen. Det här är ingen kort och bra intro till Olle, man kan göra en mycket bättre.
- (21:50 03-20 lee) hmm. Ja, kan väl diskutera vad ska vi ha i vår coreWars. (Kan du va snäll och skriva 
    en sammanfattning/intro till coreWars? Jag är inte så bra på sammanfattning. ;D)

 - (22:50 03-20 lee kanske sådana?)    
 
 
    CoreWars, may also concerned as a prototype of the morden computer virus, is a programming game which require Redcode(assembly-like language) to play. Before the game starts, each player can create their own warriors with different abilities/roles, e.g. bomber -blindly set illegal instructions to the enemy; Replicator -make repeated copies of your program, which makes you harder to be killed, Scanner -attempt to identify enemy programs and then eliminate them, etc. With those warriors, player may interrupt/lure/disturb/terminate the opponent's program and at last terminate all opponents' processes to win the game. 
    
    The most basic/original CoreWars are using ICWS-88 redcode. Which contains ten instructions and 4 different kinds a-mod(immediate, direct, indirect and predecrement-indirect). The instruction fields contain OP-code and two operands(OP A B).
    
- (Jesper) Jag anser att vi bör hålla oss till standadren, då kan vi automagiskt exekvera en massa program som redan finns.
           Vi skulle, om vi får tid över implimentera en del nya instruktioner (och A-mod)
- (Jonas) Jag tycker vi håller oss till standarden. Den verkar bra och vettig.





--------------------------------------------------------i am split line----------------------------------------------------------------------
    
    
Core War is a programming game in which two battle programs compete for the control of the "Memory Array Redcode Simulator". At the start eacah battle program is put into the meory array at a random location, after which each battle program can execute one instruction in turn.
The object of the game is to cause all processes of the opposing programs to terminate.
For more informaion, please check: <http://corewars.nihilists.de/redcode-icws-88.pdf> or
                                   <http://en.wikipedia.org/wiki/Core_War>
- Game detail
    = How to play?
        Each gamer create their own warriors and place them into the computer, then sit back and watch
        them killing each other after game starts.
    = Strategy
        There are three common strategies(replicator, scanner and bomber) also aka paper, scissors and stone.

        = Bomber=(stone): blindly copies a "bomb" at regular intervals in the core, hoping to hit the enemy.
          The bomb is often a DAT instruction, multi-instruction etc.
        = Replicator =(paper): makes repeated copies of itself and executes them in parallel, filling the
          entire core of its code.
        = Scanner =(scissor): is designed to beat replicators, usually by bombing memory with SPL 0
          instructions. This causes the enemy to create a huge number of processes which do nothing but
          create more processes. This slows down useful processes. When the enemy becomes so slow that it is
          unable to do anything useful, the memory is bombed with DAT instructions.
        (and lots more, like Dwarfm imp, germini and Juggeraut)

    = instruction: OP A B
        > OP: which operation to be performed, wich a-mod should be used.
        > Instruction set of ICWS-88 Core War:
            DAT A B: remove executing process from process queue
            MOV A B: move A to B
            ADD A B: add A to B
            SUB A B: subtract A from B
            JMP A B: jump to A
            JMZ A B: jump to A if B is zero
            JMN A B: jump to A if B is not zero
            CMP A B: if A equals B, then skip the next instruction
            SLT A B: if A is less than B then skip next instruction
            DJN A B: decrement A; if B is not zero then jump to A
            SPL A B: place A in the process queue
    = A-mod:
        immediate(#); direct(default); indirect(@) and predecrement-indirect(<) is allowed.

